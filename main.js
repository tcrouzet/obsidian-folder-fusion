/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FolderFusion
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  noteSeparator: ""
};
var FolderFusion = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new FolderFusionSettingTab(this.app, this));
    this.registerEvent(this.app.workspace.on("file-menu", (menu, file) => {
      if (file instanceof import_obsidian.TFolder) {
        menu.addItem((item) => {
          item.setTitle("Folder fusion").onClick(() => {
            this.exportFolder(file.path);
          });
        });
      }
    }));
  }
  async exportFolder(folderPath) {
    this.concatenateFiles(folderPath).then((result) => {
      this.savingFiles(folderPath, result);
    });
  }
  async concatenateFiles(folderPath) {
    const fusionFileRegex = /fusion-.*-\d{8}-\d{4}\.md$/;
    const files = this.app.vault.getFiles().filter(
      (file) => file.path.startsWith(folderPath) && !fusionFileRegex.test(file.path)
    );
    const sortedFiles = files.sort((a, b) => a.path.localeCompare(b.path));
    let concatenatedContent = "";
    for (const file of sortedFiles) {
      const fileContent = await this.app.vault.read(file);
      concatenatedContent += fileContent + "\n\n";
      concatenatedContent += this.settings.noteSeparator;
    }
    return concatenatedContent;
  }
  async savingFiles(folderPath, content) {
    const folderName = this.getFolderNameFromPath(folderPath);
    const currentDate = new Date();
    const formattedDate = currentDate.toISOString().slice(0, 10).replace(/-/g, "") + "-" + currentDate.toISOString().slice(11, 13) + currentDate.toISOString().slice(14, 16);
    const tempFilePath = `${folderPath}/fusion-${folderName}-${formattedDate}.md`;
    await this.app.vault.adapter.write(tempFilePath, content);
  }
  getFolderNameFromPath(folderPath) {
    const pathParts = folderPath.split("/");
    return pathParts[pathParts.length - 1];
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  onunload() {
  }
};
var FolderFusionSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Note separator").setDesc("Nothing by default, but you can use Latex '\\newpage' for example.").addText((text) => text.setPlaceholder("Enter your separator").setValue(this.plugin.settings.noteSeparator).onChange(async (value) => {
      this.plugin.settings.noteSeparator = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgTW9kYWwsIE5vdGljZSwgVEZvbGRlciwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG4vLyBSZW1lbWJlciB0byByZW5hbWUgdGhlc2UgY2xhc3NlcyBhbmQgaW50ZXJmYWNlcyFcblxuaW50ZXJmYWNlIEZvbGRlckZ1c2lvblNldHRpbmdzIHtcbiAgICBub3RlU2VwYXJhdG9yOiBzdHJpbmc7XG59XG5cbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IEZvbGRlckZ1c2lvblNldHRpbmdzID0ge1xuXHRub3RlU2VwYXJhdG9yOiAnJ1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGb2xkZXJGdXNpb24gZXh0ZW5kcyBQbHVnaW4ge1xuXHRzZXR0aW5nczogRm9sZGVyRnVzaW9uU2V0dGluZ3M7XG5cblx0YXN5bmMgb25sb2FkKCkge1xuXHRcdGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XG5cblx0XHQvLyBUaGlzIGFkZHMgYSBzZXR0aW5ncyB0YWIgc28gdGhlIHVzZXIgY2FuIGNvbmZpZ3VyZSB2YXJpb3VzIGFzcGVjdHMgb2YgdGhlIHBsdWdpblxuXHRcdHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgRm9sZGVyRnVzaW9uU2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xuXG5cdFx0dGhpcy5yZWdpc3RlckV2ZW50KHRoaXMuYXBwLndvcmtzcGFjZS5vbignZmlsZS1tZW51JywgKG1lbnUsIGZpbGUpID0+IHtcblx0XHRcdC8vIFZcdTAwRTlyaWZpZXIgc2kgbCdcdTAwRTlsXHUwMEU5bWVudCBjbGlxdVx1MDBFOSBlc3QgdW4gZG9zc2llclxuXHRcdFx0aWYgKGZpbGUgaW5zdGFuY2VvZiBURm9sZGVyKSB7XG5cdFx0XHRcdC8vIEFqb3V0ZXIgdW5lIGNvbW1hbmRlIGQnZXhwb3J0YXRpb24gYXUgbWVudSBjb250ZXh0dWVsXG5cdFx0XHRcdG1lbnUuYWRkSXRlbSgoaXRlbSkgPT4ge1xuXHRcdFx0XHRcdGl0ZW0uc2V0VGl0bGUoJ0ZvbGRlciBmdXNpb24nKVxuXHRcdFx0XHRcdCAgIC5vbkNsaWNrKCgpID0+IHtcblx0XHRcdFx0XHRcdCAgIC8vIEFwcGVsZXIgdm90cmUgZm9uY3Rpb24gZCdleHBvcnRhdGlvbiBpY2lcblx0XHRcdFx0XHRcdCAgIHRoaXMuZXhwb3J0Rm9sZGVyKGZpbGUucGF0aCk7XG5cdFx0XHRcdFx0ICAgfSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0pKTtcblx0fVxuXG5cdGFzeW5jIGV4cG9ydEZvbGRlcihmb2xkZXJQYXRoOnN0cmluZyl7XG5cdFx0dGhpcy5jb25jYXRlbmF0ZUZpbGVzKGZvbGRlclBhdGgpLnRoZW4ocmVzdWx0ID0+IHtcblx0XHRcdHRoaXMuc2F2aW5nRmlsZXMoZm9sZGVyUGF0aCxyZXN1bHQpXG5cdFx0fSk7XG5cdH1cblxuXHRhc3luYyBjb25jYXRlbmF0ZUZpbGVzKGZvbGRlclBhdGg6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG5cblx0XHRjb25zdCBmdXNpb25GaWxlUmVnZXggPSAvZnVzaW9uLS4qLVxcZHs4fS1cXGR7NH1cXC5tZCQvO1xuXG5cdFx0Y29uc3QgZmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRGaWxlcygpXG5cdFx0XHQuZmlsdGVyKGZpbGUgPT4gXG5cdFx0XHRcdGZpbGUucGF0aC5zdGFydHNXaXRoKGZvbGRlclBhdGgpICYmIFxuXHRcdFx0XHQhZnVzaW9uRmlsZVJlZ2V4LnRlc3QoZmlsZS5wYXRoKVxuXHRcdFx0KTtcblxuXHRcdGNvbnN0IHNvcnRlZEZpbGVzID0gZmlsZXMuc29ydCgoYSwgYikgPT4gYS5wYXRoLmxvY2FsZUNvbXBhcmUoYi5wYXRoKSk7XG5cblx0XHRsZXQgY29uY2F0ZW5hdGVkQ29udGVudCA9ICcnO1xuXHRcblx0XHRmb3IgKGNvbnN0IGZpbGUgb2Ygc29ydGVkRmlsZXMpIHtcblx0XHRcdGNvbnN0IGZpbGVDb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChmaWxlKTtcblx0XHRcdGNvbmNhdGVuYXRlZENvbnRlbnQgKz0gZmlsZUNvbnRlbnQgKyAnXFxuXFxuJzsgLy8gQWpvdXRlciB1bmUgc1x1MDBFOXBhcmF0aW9uIGVudHJlIGxlcyBmaWNoaWVyc1xuXHRcdFx0Y29uY2F0ZW5hdGVkQ29udGVudCArPSB0aGlzLnNldHRpbmdzLm5vdGVTZXBhcmF0b3I7XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gY29uY2F0ZW5hdGVkQ29udGVudDtcblx0fVxuXG5cdGFzeW5jIHNhdmluZ0ZpbGVzKGZvbGRlclBhdGg6IHN0cmluZyxjb250ZW50OiBzdHJpbmcpIHtcblx0XHRjb25zdCBmb2xkZXJOYW1lID0gdGhpcy5nZXRGb2xkZXJOYW1lRnJvbVBhdGgoZm9sZGVyUGF0aCk7XG5cdFx0Y29uc3QgY3VycmVudERhdGUgPSBuZXcgRGF0ZSgpO1xuXHRcdGNvbnN0IGZvcm1hdHRlZERhdGUgPSBjdXJyZW50RGF0ZS50b0lTT1N0cmluZygpLnNsaWNlKDAsIDEwKS5yZXBsYWNlKC8tL2csICcnKSArICctJyArIGN1cnJlbnREYXRlLnRvSVNPU3RyaW5nKCkuc2xpY2UoMTEsIDEzKSArIGN1cnJlbnREYXRlLnRvSVNPU3RyaW5nKCkuc2xpY2UoMTQsIDE2KTtcblx0XHRjb25zdCB0ZW1wRmlsZVBhdGggPSBgJHtmb2xkZXJQYXRofS9mdXNpb24tJHtmb2xkZXJOYW1lfS0ke2Zvcm1hdHRlZERhdGV9Lm1kYDtcblx0XHRhd2FpdCB0aGlzLmFwcC52YXVsdC5hZGFwdGVyLndyaXRlKHRlbXBGaWxlUGF0aCwgY29udGVudCk7XG5cdH1cblxuXHRnZXRGb2xkZXJOYW1lRnJvbVBhdGgoZm9sZGVyUGF0aDpzdHJpbmcpIHtcblx0XHRjb25zdCBwYXRoUGFydHMgPSBmb2xkZXJQYXRoLnNwbGl0KCcvJyk7XG5cdFx0cmV0dXJuIHBhdGhQYXJ0c1twYXRoUGFydHMubGVuZ3RoIC0gMV07XG5cdH1cblxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG5cdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XG5cdH1cblxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG5cdFx0YXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcblx0fVxuXG5cdG9udW5sb2FkKCkge1xuXHR9XG5cbn1cblxuY2xhc3MgRm9sZGVyRnVzaW9uU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xuXHRwbHVnaW46IEZvbGRlckZ1c2lvbjtcblxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBGb2xkZXJGdXNpb24pIHtcblx0XHRzdXBlcihhcHAsIHBsdWdpbik7XG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XG5cdH1cblxuXHRkaXNwbGF5KCk6IHZvaWQge1xuXHRcdGNvbnN0IHtjb250YWluZXJFbH0gPSB0aGlzO1xuXG5cdFx0Y29udGFpbmVyRWwuZW1wdHkoKTtcblxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoJ05vdGUgc2VwYXJhdG9yJylcblx0XHRcdC5zZXREZXNjKCdOb3RoaW5nIGJ5IGRlZmF1bHQsIGJ1dCB5b3UgY2FuIHVzZSBMYXRleCBcXCdcXFxcbmV3cGFnZVxcJyBmb3IgZXhhbXBsZS4nKVxuXHRcdFx0LmFkZFRleHQodGV4dCA9PiB0ZXh0XG5cdFx0XHRcdC5zZXRQbGFjZWhvbGRlcignRW50ZXIgeW91ciBzZXBhcmF0b3InKVxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Mubm90ZVNlcGFyYXRvcilcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLm5vdGVTZXBhcmF0b3IgPSB2YWx1ZTtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0fSkpO1xuXHR9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQXFHO0FBUXJHLElBQU0sbUJBQXlDO0FBQUEsRUFDOUMsZUFBZTtBQUNoQjtBQUVBLElBQXFCLGVBQXJCLGNBQTBDLHVCQUFPO0FBQUEsRUFHaEQsTUFBTSxTQUFTO0FBQ2QsVUFBTSxLQUFLLGFBQWE7QUFHeEIsU0FBSyxjQUFjLElBQUksdUJBQXVCLEtBQUssS0FBSyxJQUFJLENBQUM7QUFFN0QsU0FBSyxjQUFjLEtBQUssSUFBSSxVQUFVLEdBQUcsYUFBYSxDQUFDLE1BQU0sU0FBUztBQUVyRSxVQUFJLGdCQUFnQix5QkFBUztBQUU1QixhQUFLLFFBQVEsQ0FBQyxTQUFTO0FBQ3RCLGVBQUssU0FBUyxlQUFlLEVBQ3pCLFFBQVEsTUFBTTtBQUVkLGlCQUFLLGFBQWEsS0FBSyxJQUFJO0FBQUEsVUFDNUIsQ0FBQztBQUFBLFFBQ0wsQ0FBQztBQUFBLE1BQ0Y7QUFBQSxJQUNELENBQUMsQ0FBQztBQUFBLEVBQ0g7QUFBQSxFQUVBLE1BQU0sYUFBYSxZQUFrQjtBQUNwQyxTQUFLLGlCQUFpQixVQUFVLEVBQUUsS0FBSyxZQUFVO0FBQ2hELFdBQUssWUFBWSxZQUFXLE1BQU07QUFBQSxJQUNuQyxDQUFDO0FBQUEsRUFDRjtBQUFBLEVBRUEsTUFBTSxpQkFBaUIsWUFBcUM7QUFFM0QsVUFBTSxrQkFBa0I7QUFFeEIsVUFBTSxRQUFRLEtBQUssSUFBSSxNQUFNLFNBQVMsRUFDcEM7QUFBQSxNQUFPLFVBQ1AsS0FBSyxLQUFLLFdBQVcsVUFBVSxLQUMvQixDQUFDLGdCQUFnQixLQUFLLEtBQUssSUFBSTtBQUFBLElBQ2hDO0FBRUQsVUFBTSxjQUFjLE1BQU0sS0FBSyxDQUFDLEdBQUcsTUFBTSxFQUFFLEtBQUssY0FBYyxFQUFFLElBQUksQ0FBQztBQUVyRSxRQUFJLHNCQUFzQjtBQUUxQixlQUFXLFFBQVEsYUFBYTtBQUMvQixZQUFNLGNBQWMsTUFBTSxLQUFLLElBQUksTUFBTSxLQUFLLElBQUk7QUFDbEQsNkJBQXVCLGNBQWM7QUFDckMsNkJBQXVCLEtBQUssU0FBUztBQUFBLElBQ3RDO0FBRUEsV0FBTztBQUFBLEVBQ1I7QUFBQSxFQUVBLE1BQU0sWUFBWSxZQUFtQixTQUFpQjtBQUNyRCxVQUFNLGFBQWEsS0FBSyxzQkFBc0IsVUFBVTtBQUN4RCxVQUFNLGNBQWMsSUFBSSxLQUFLO0FBQzdCLFVBQU0sZ0JBQWdCLFlBQVksWUFBWSxFQUFFLE1BQU0sR0FBRyxFQUFFLEVBQUUsUUFBUSxNQUFNLEVBQUUsSUFBSSxNQUFNLFlBQVksWUFBWSxFQUFFLE1BQU0sSUFBSSxFQUFFLElBQUksWUFBWSxZQUFZLEVBQUUsTUFBTSxJQUFJLEVBQUU7QUFDdkssVUFBTSxlQUFlLEdBQUcscUJBQXFCLGNBQWM7QUFDM0QsVUFBTSxLQUFLLElBQUksTUFBTSxRQUFRLE1BQU0sY0FBYyxPQUFPO0FBQUEsRUFDekQ7QUFBQSxFQUVBLHNCQUFzQixZQUFtQjtBQUN4QyxVQUFNLFlBQVksV0FBVyxNQUFNLEdBQUc7QUFDdEMsV0FBTyxVQUFVLFVBQVUsU0FBUyxDQUFDO0FBQUEsRUFDdEM7QUFBQSxFQUVBLE1BQU0sZUFBZTtBQUNwQixTQUFLLFdBQVcsT0FBTyxPQUFPLENBQUMsR0FBRyxrQkFBa0IsTUFBTSxLQUFLLFNBQVMsQ0FBQztBQUFBLEVBQzFFO0FBQUEsRUFFQSxNQUFNLGVBQWU7QUFDcEIsVUFBTSxLQUFLLFNBQVMsS0FBSyxRQUFRO0FBQUEsRUFDbEM7QUFBQSxFQUVBLFdBQVc7QUFBQSxFQUNYO0FBRUQ7QUFFQSxJQUFNLHlCQUFOLGNBQXFDLGlDQUFpQjtBQUFBLEVBR3JELFlBQVksS0FBVSxRQUFzQjtBQUMzQyxVQUFNLEtBQUssTUFBTTtBQUNqQixTQUFLLFNBQVM7QUFBQSxFQUNmO0FBQUEsRUFFQSxVQUFnQjtBQUNmLFVBQU0sRUFBQyxZQUFXLElBQUk7QUFFdEIsZ0JBQVksTUFBTTtBQUVsQixRQUFJLHdCQUFRLFdBQVcsRUFDckIsUUFBUSxnQkFBZ0IsRUFDeEIsUUFBUSxvRUFBc0UsRUFDOUUsUUFBUSxVQUFRLEtBQ2YsZUFBZSxzQkFBc0IsRUFDckMsU0FBUyxLQUFLLE9BQU8sU0FBUyxhQUFhLEVBQzNDLFNBQVMsT0FBTyxVQUFVO0FBQzFCLFdBQUssT0FBTyxTQUFTLGdCQUFnQjtBQUNyQyxZQUFNLEtBQUssT0FBTyxhQUFhO0FBQUEsSUFDaEMsQ0FBQyxDQUFDO0FBQUEsRUFDTDtBQUNEOyIsCiAgIm5hbWVzIjogW10KfQo=
