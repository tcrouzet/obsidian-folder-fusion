/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FolderFusion
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  noteSeparator: "",
  exclude: "sortspec|_i",
  smallcaps: false,
  right: false,
  newpage: false,
  toppara: false,
  poem: false,
  hardspaces: false,
  nocomments: true,
  noMDcomments: true,
  apostrophe: true
};
var FolderFusion = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new FolderFusionSettingTab(this.app, this));
    this.registerEvent(this.app.workspace.on("file-menu", (menu, file) => {
      if (file instanceof import_obsidian.TFolder) {
        menu.addItem((item) => {
          item.setTitle("Folder fusion").onClick(() => {
            this.exportFolder(file.path);
          });
        });
      }
    }));
  }
  async exportFolder(folderPath) {
    this.concatenateFiles(folderPath).then((result) => {
      this.savingFiles(folderPath, result);
    });
  }
  async concatenateFiles(folderPath) {
    const fusionFileRegex = /fusion-.*-\d{8}-\d{4}\.md$/;
    const excludeRegex = new RegExp(this.settings.exclude);
    const files = this.app.vault.getFiles().filter(
      (file) => file.path.startsWith(folderPath) && !fusionFileRegex.test(file.path)
    );
    const sortedFiles = files.sort((a, b) => a.path.localeCompare(b.path));
    let concatenatedContent = "";
    for (const file of sortedFiles) {
      if (excludeRegex.test(file.path)) {
        continue;
      }
      let fileContent = await this.app.vault.read(file);
      if (this.settings.nocomments) {
        fileContent = fileContent.replace(/<!--[\s\S]*?-->/g, "");
      }
      if (this.settings.noMDcomments) {
        fileContent = fileContent.replace(/%%[\s\S]*?%%\n?/g, "");
      }
      if (this.settings.hardspaces) {
        fileContent = this.hardspaces(fileContent);
      }
      if (this.settings.apostrophe) {
        fileContent = this.apostrophes(fileContent);
      }
      if (this.settings.smallcaps) {
        fileContent = fileContent.replace(/--(.*?)--/g, '<span style="font-variant:small-caps">$1</span>');
      }
      if (this.settings.right) {
        fileContent = fileContent.replace(/@@(.*?)(\n|$)/g, '<div custom-style="Right" class="right" align="right">$1</div>\n');
      }
      if (this.settings.toppara) {
        fileContent = fileContent.replace(/££(.*?)(\n|$)/g, '<div custom-style="top-para" class="top-para" style="text-align:justify">$1</div>\n');
      }
      if (this.settings.poem) {
        fileContent = this.poem(fileContent);
      }
      if (this.settings.newpage) {
        fileContent = fileContent.replace(/\\newpage/g, '<div custom-style="page-break" class="page-beak" style="page-break-after: always">-</div>');
      }
      concatenatedContent += fileContent + "\n\n";
      concatenatedContent += this.settings.noteSeparator;
    }
    return concatenatedContent;
  }
  async savingFiles(folderPath, content) {
    const folderName = this.getFolderNameFromPath(folderPath);
    const currentDate = new Date();
    const formattedDate = currentDate.toISOString().slice(0, 10).replace(/-/g, "") + "-" + currentDate.toISOString().slice(11, 13) + currentDate.toISOString().slice(14, 16);
    const tempFilePath = `${folderPath}/fusion-${folderName}-${formattedDate}.md`;
    await this.app.vault.adapter.write(tempFilePath, content);
  }
  getFolderNameFromPath(folderPath) {
    const pathParts = folderPath.split("/");
    return pathParts[pathParts.length - 1];
  }
  hardspaces(content) {
    const htmlRegex = /<[^>]*>/g;
    const yamlRegex = /---[\s\S]+?---/g;
    let htmlMatches = content.match(htmlRegex) || [];
    let yamlMatches = content.match(yamlRegex) || [];
    content = content.replace(htmlRegex, "HTML_PLACEHOLDER");
    content = content.replace(yamlRegex, "YAML_PLACEHOLDER");
    let regex = /(.)([:;?!»])/g;
    content = content.replace(regex, (match, p1, p2) => {
      if (p1 === " " || p1 === "\xA0") {
        return "\xA0" + p2;
      }
      return p1 + "\xA0" + p2;
    });
    regex = /([«—])(.)?/g;
    content = content.replace(regex, (match, p1, p2) => {
      if (p2 === " " || p2 === "\xA0") {
        return p1 + "\xA0";
      }
      return p1 + "\xA0" + p2;
    });
    htmlMatches.forEach((placeholder) => {
      content = content.replace("HTML_PLACEHOLDER", placeholder);
    });
    yamlMatches.forEach((placeholder) => {
      content = content.replace("YAML_PLACEHOLDER", placeholder);
    });
    return content;
  }
  apostrophes(content) {
    const htmlRegex = /<[^>]*>/g;
    const yamlRegex = /---[\s\S]+?---/g;
    let htmlMatches = content.match(htmlRegex) || [];
    let yamlMatches = content.match(yamlRegex) || [];
    content = content.replace(htmlRegex, "HTML_PLACEHOLDER");
    content = content.replace(yamlRegex, "YAML_PLACEHOLDER");
    content = content.replace(/'/g, "\u2019");
    htmlMatches.forEach((placeholder) => {
      content = content.replace("HTML_PLACEHOLDER", placeholder);
    });
    yamlMatches.forEach((placeholder) => {
      content = content.replace("YAML_PLACEHOLDER", placeholder);
    });
    return content;
  }
  poem(content) {
    content = content.replace(/€€(.*?)€€/gs, (match, poem) => {
      let paragraphs = poem.split("\n\n");
      if (paragraphs.length === 1) {
        return `<div custom-style="poem-solo" class="poem-solo">${paragraphs[0]}</div>
`;
      } else {
        let formattedPoem = paragraphs.map((p, index) => {
          if (index === 0) {
            return `<div custom-style="poem-top" class="poem-top">${p}</div>
`;
          } else if (index === paragraphs.length - 1) {
            return `<div custom-style="poem-bottom" class="poem-bottom">${p}</div>`;
          } else {
            return `<div custom-style="poem" class="poem">${p}</div>
`;
          }
        }).join("\n");
        return formattedPoem;
      }
    });
    return content;
  }
  async duplicateFolder(folderPath) {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  onunload() {
  }
};
var FolderFusionSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    const titleEl = containerEl.createEl("h2", { text: "Folder Fusion settings" });
    new import_obsidian.Setting(containerEl).setName("Small caps").setDesc("Convert --text-- into Pandoc HTML small caps").addToggle((toggle) => toggle.setValue(this.plugin.settings.smallcaps).onChange(async (value) => {
      this.plugin.settings.smallcaps = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Apply right style").setDesc("Convert @@paragraph into Pandoc HTML align right").addToggle((toggle) => toggle.setValue(this.plugin.settings.right).onChange(async (value) => {
      this.plugin.settings.right = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Applys top-para style").setDesc("Convert \xA3\xA3paragraph into Pandoc Docx top-para").addToggle((toggle) => toggle.setValue(this.plugin.settings.toppara).onChange(async (value) => {
      this.plugin.settings.toppara = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Applys poem style").setDesc("Convert \u20AC\u20ACparagraph into Pandoc Docx poem").addToggle((toggle) => toggle.setValue(this.plugin.settings.poem).onChange(async (value) => {
      this.plugin.settings.poem = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("New page").setDesc("Convert \\newpage into word stype page-break").addToggle((toggle) => toggle.setValue(this.plugin.settings.newpage).onChange(async (value) => {
      this.plugin.settings.newpage = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("No HTML comments").setDesc("Remove all <!-- text -->").addToggle((toggle) => toggle.setValue(this.plugin.settings.nocomments).onChange(async (value) => {
      this.plugin.settings.nocomments = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("No Markdown comments").setDesc("Remove all %%text%%").addToggle((toggle) => toggle.setValue(this.plugin.settings.noMDcomments).onChange(async (value) => {
      this.plugin.settings.noMDcomments = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Typographic aposttrophes").setDesc("Replace ' with \u2019").addToggle((toggle) => toggle.setValue(this.plugin.settings.apostrophe).onChange(async (value) => {
      this.plugin.settings.apostrophe = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("French hard spaces").setDesc("Addapt hard spaces before double ponctuations").addToggle((toggle) => toggle.setValue(this.plugin.settings.hardspaces).onChange(async (value) => {
      this.plugin.settings.hardspaces = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Exclude").setDesc("Regex to exclude files and folders.").addText((text) => text.setPlaceholder("Enter your files and folders").setValue(this.plugin.settings.exclude).onChange(async (value) => {
      this.plugin.settings.exclude = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Note separator").setDesc("You can use Latex \\newpage for example.").addText((text) => text.setPlaceholder("Enter your separator").setValue(this.plugin.settings.noteSeparator).onChange(async (value) => {
      this.plugin.settings.noteSeparator = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
